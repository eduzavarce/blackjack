{
  "info": {
    "_postman_id": "1a2b3c4d-5e6f-7g8h-9i0j-1k2l3m4n5o6p",
    "name": "Blackjack API",
    "description": "Collection for testing the Blackjack API endpoints",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "v2.1.0"
  },
  "item": [
    {
      "name": "User Management",
      "description": "Endpoints for managing users",
      "item": [
        {
          "name": "Create User",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate a new UUID for the user",
                  "const uuid = pm.variables.replaceIn('{{$guid}}');",
                  "pm.collectionVariables.set('userId', uuid);",
                  "console.log('Generated User ID:', uuid);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"John Doe\",\n    \"email\": \"john.doe@example.com\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/{{userId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "users", "{{userId}}"],
              "protocol": "http"
            },
            "description": "Creates a new user with the specified ID, name, and email"
          }
        },
        {
          "name": "Change User Name",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"name\": \"John Smith\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/users/{{userId}}/name",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "users", "{{userId}}", "name"],
              "protocol": "http"
            },
            "description": "Updates the name of an existing user"
          }
        }
      ]
    },
    {
      "name": "Game Play",
      "description": "Endpoints for managing game plays",
      "item": [
        {
          "name": "Create Play",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Generate a new UUID for the play",
                  "const uuid = pm.variables.replaceIn('{{$guid}}');",
                  "pm.collectionVariables.set('playId', uuid);",
                  "console.log('Generated Play ID:', uuid);"
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n    \"userId\": \"{{userId}}\",\n    \"betAmount\": 50.0\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/v1/play/{{playId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "play", "{{playId}}"],
              "protocol": "http"
            },
            "description": "Creates a new blackjack play with the specified ID, user ID, and bet amount"
          }
        },
        {
          "name": "Get Play",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response includes play details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('playId'));",
                  "    pm.expect(jsonData.userId).to.eql(pm.collectionVariables.get('userId'));",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/v1/play/{{playId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "play", "{{playId}}"],
              "protocol": "http"
            },
            "description": "Retrieves a play by its unique identifier"
          }
        },
        {
          "name": "Perform Play",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response includes completed play details\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('playId'));",
                  "    pm.expect(jsonData.userId).to.eql(pm.collectionVariables.get('userId'));",
                  "    pm.expect(jsonData.status).to.eql('COMPLETED');",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "url": {
              "raw": "{{baseUrl}}/api/v1/play/{{playId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "play", "{{playId}}"],
              "protocol": "http"
            },
            "description": "Executes a blackjack play (draws cards) for the specified play ID"
          }
        }
      ]
    },
    {
      "name": "Ranking",
      "description": "Endpoints for retrieving player rankings",
      "item": [
        {
          "name": "Get Scoreboard",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response is an array\", function () {",
                  "    var jsonData = pm.response.json();",
                  "    pm.expect(Array.isArray(jsonData)).to.be.true;",
                  "});"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "url": {
              "raw": "{{baseUrl}}/api/v1/ranking?limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "v1", "ranking"],
              "query": [
                {
                  "key": "limit",
                  "value": "10",
                  "description": "Maximum number of rankings to return"
                }
              ],
              "protocol": "http"
            },
            "description": "Retrieves a list of player rankings sorted by earnings"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    }
  ],
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "playId",
      "value": "",
      "type": "string"
    }
  ]
}
