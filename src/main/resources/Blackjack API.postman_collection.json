{
	"info": {
		"_postman_id": "61347bfa-c6ed-493f-b4f3-6b6413fd6dea",
		"name": "Blackjack API",
		"description": "Collection for testing the Blackjack API endpoints",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26457391"
	},
	"item": [
		{
			"name": "User Management",
			"item": [
				{
					"name": "Create User",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a new UUID for the user",
									"const uuid = pm.variables.replaceIn('{{$guid}}');",
									"pm.collectionVariables.set('userId', uuid);",
									"console.log('Generated User ID:', uuid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Doe\",\n    \"email\": \"jo25h2n.d2o2e@example.com\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						},
						"description": "Creates a new user with the specified ID, name, and email"
					},
					"response": []
				},
				{
					"name": "Change User Name",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"John Smith\"\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/users/{{userId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"users",
								"{{userId}}"
							]
						},
						"description": "Updates the name of an existing user"
					},
					"response": []
				}
			],
			"description": "Endpoints for managing users"
		},
		{
			"name": "Game Play",
			"item": [
				{
					"name": "Create Play",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// Generate a new UUID for the play",
									"const uuid = pm.variables.replaceIn('{{$guid}}');",
									"pm.collectionVariables.set('playId', uuid);",
									"console.log('Generated Play ID:', uuid);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{userId}}\",\n    \"betAmount\": 50.0\n}"
						},
						"url": {
							"raw": "{{baseUrl}}/api/v1/play/{{playId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"play",
								"{{playId}}"
							]
						},
						"description": "Creates a new blackjack play with the specified ID, user ID, and bet amount"
					},
					"response": []
				},
				{
					"name": "Get Play",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes play details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('playId'));",
									"    pm.expect(jsonData.userId).to.eql(pm.collectionVariables.get('userId'));",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/play/{{playId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"play",
								"{{playId}}"
							]
						},
						"description": "Retrieves a play by its unique identifier"
					},
					"response": []
				},
				{
					"name": "Hit me Play",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes completed play details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('playId'));",
									"    pm.expect(jsonData.userId).to.eql(pm.collectionVariables.get('userId'));",
									"    pm.expect(jsonData.status).to.eql('COMPLETED');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/play/{{playId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"play",
								"{{playId}}"
							]
						},
						"description": "Executes a blackjack play (draws cards) for the specified play ID"
					},
					"response": []
				},
				{
					"name": "Stand play",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response includes completed play details\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(pm.collectionVariables.get('playId'));",
									"    pm.expect(jsonData.userId).to.eql(pm.collectionVariables.get('userId'));",
									"    pm.expect(jsonData.status).to.eql('COMPLETED');",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/play/{{playId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"play",
								"{{playId}}"
							]
						},
						"description": "Executes a blackjack play (draws cards) for the specified play ID"
					},
					"response": []
				}
			],
			"description": "Endpoints for managing game plays"
		},
		{
			"name": "Ranking",
			"item": [
				{
					"name": "Get Scoreboard",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Response is an array\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(Array.isArray(jsonData)).to.be.true;",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/api/v1/ranking?limit=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"api",
								"v1",
								"ranking"
							],
							"query": [
								{
									"key": "limit",
									"value": "10",
									"description": "Maximum number of rankings to return"
								}
							]
						},
						"description": "Retrieves a list of player rankings sorted by earnings"
					},
					"response": []
				}
			],
			"description": "Endpoints for retrieving player rankings"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "playId",
			"value": "",
			"type": "string"
		}
	]
}